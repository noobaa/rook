/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rook/rook/pkg/apis/noobaa.rook.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NooBaaBackingStoreLister helps list NooBaaBackingStores.
type NooBaaBackingStoreLister interface {
	// List lists all NooBaaBackingStores in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NooBaaBackingStore, err error)
	// NooBaaBackingStores returns an object that can list and get NooBaaBackingStores.
	NooBaaBackingStores(namespace string) NooBaaBackingStoreNamespaceLister
	NooBaaBackingStoreListerExpansion
}

// nooBaaBackingStoreLister implements the NooBaaBackingStoreLister interface.
type nooBaaBackingStoreLister struct {
	indexer cache.Indexer
}

// NewNooBaaBackingStoreLister returns a new NooBaaBackingStoreLister.
func NewNooBaaBackingStoreLister(indexer cache.Indexer) NooBaaBackingStoreLister {
	return &nooBaaBackingStoreLister{indexer: indexer}
}

// List lists all NooBaaBackingStores in the indexer.
func (s *nooBaaBackingStoreLister) List(selector labels.Selector) (ret []*v1alpha1.NooBaaBackingStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NooBaaBackingStore))
	})
	return ret, err
}

// NooBaaBackingStores returns an object that can list and get NooBaaBackingStores.
func (s *nooBaaBackingStoreLister) NooBaaBackingStores(namespace string) NooBaaBackingStoreNamespaceLister {
	return nooBaaBackingStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NooBaaBackingStoreNamespaceLister helps list and get NooBaaBackingStores.
type NooBaaBackingStoreNamespaceLister interface {
	// List lists all NooBaaBackingStores in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NooBaaBackingStore, err error)
	// Get retrieves the NooBaaBackingStore from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NooBaaBackingStore, error)
	NooBaaBackingStoreNamespaceListerExpansion
}

// nooBaaBackingStoreNamespaceLister implements the NooBaaBackingStoreNamespaceLister
// interface.
type nooBaaBackingStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NooBaaBackingStores in the indexer for a given namespace.
func (s nooBaaBackingStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NooBaaBackingStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NooBaaBackingStore))
	})
	return ret, err
}

// Get retrieves the NooBaaBackingStore from the indexer for a given namespace and name.
func (s nooBaaBackingStoreNamespaceLister) Get(name string) (*v1alpha1.NooBaaBackingStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("noobaabackingstore"), name)
	}
	return obj.(*v1alpha1.NooBaaBackingStore), nil
}
