/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rook/rook/pkg/apis/noobaa.rook.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NooBaaSystemLister helps list NooBaaSystems.
type NooBaaSystemLister interface {
	// List lists all NooBaaSystems in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NooBaaSystem, err error)
	// NooBaaSystems returns an object that can list and get NooBaaSystems.
	NooBaaSystems(namespace string) NooBaaSystemNamespaceLister
	NooBaaSystemListerExpansion
}

// nooBaaSystemLister implements the NooBaaSystemLister interface.
type nooBaaSystemLister struct {
	indexer cache.Indexer
}

// NewNooBaaSystemLister returns a new NooBaaSystemLister.
func NewNooBaaSystemLister(indexer cache.Indexer) NooBaaSystemLister {
	return &nooBaaSystemLister{indexer: indexer}
}

// List lists all NooBaaSystems in the indexer.
func (s *nooBaaSystemLister) List(selector labels.Selector) (ret []*v1alpha1.NooBaaSystem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NooBaaSystem))
	})
	return ret, err
}

// NooBaaSystems returns an object that can list and get NooBaaSystems.
func (s *nooBaaSystemLister) NooBaaSystems(namespace string) NooBaaSystemNamespaceLister {
	return nooBaaSystemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NooBaaSystemNamespaceLister helps list and get NooBaaSystems.
type NooBaaSystemNamespaceLister interface {
	// List lists all NooBaaSystems in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NooBaaSystem, err error)
	// Get retrieves the NooBaaSystem from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NooBaaSystem, error)
	NooBaaSystemNamespaceListerExpansion
}

// nooBaaSystemNamespaceLister implements the NooBaaSystemNamespaceLister
// interface.
type nooBaaSystemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NooBaaSystems in the indexer for a given namespace.
func (s nooBaaSystemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NooBaaSystem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NooBaaSystem))
	})
	return ret, err
}

// Get retrieves the NooBaaSystem from the indexer for a given namespace and name.
func (s nooBaaSystemNamespaceLister) Get(name string) (*v1alpha1.NooBaaSystem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("noobaasystem"), name)
	}
	return obj.(*v1alpha1.NooBaaSystem), nil
}
