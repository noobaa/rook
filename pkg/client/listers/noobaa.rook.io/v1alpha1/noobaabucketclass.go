/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rook/rook/pkg/apis/noobaa.rook.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NooBaaBucketClassLister helps list NooBaaBucketClasses.
type NooBaaBucketClassLister interface {
	// List lists all NooBaaBucketClasses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NooBaaBucketClass, err error)
	// NooBaaBucketClasses returns an object that can list and get NooBaaBucketClasses.
	NooBaaBucketClasses(namespace string) NooBaaBucketClassNamespaceLister
	NooBaaBucketClassListerExpansion
}

// nooBaaBucketClassLister implements the NooBaaBucketClassLister interface.
type nooBaaBucketClassLister struct {
	indexer cache.Indexer
}

// NewNooBaaBucketClassLister returns a new NooBaaBucketClassLister.
func NewNooBaaBucketClassLister(indexer cache.Indexer) NooBaaBucketClassLister {
	return &nooBaaBucketClassLister{indexer: indexer}
}

// List lists all NooBaaBucketClasses in the indexer.
func (s *nooBaaBucketClassLister) List(selector labels.Selector) (ret []*v1alpha1.NooBaaBucketClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NooBaaBucketClass))
	})
	return ret, err
}

// NooBaaBucketClasses returns an object that can list and get NooBaaBucketClasses.
func (s *nooBaaBucketClassLister) NooBaaBucketClasses(namespace string) NooBaaBucketClassNamespaceLister {
	return nooBaaBucketClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NooBaaBucketClassNamespaceLister helps list and get NooBaaBucketClasses.
type NooBaaBucketClassNamespaceLister interface {
	// List lists all NooBaaBucketClasses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NooBaaBucketClass, err error)
	// Get retrieves the NooBaaBucketClass from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NooBaaBucketClass, error)
	NooBaaBucketClassNamespaceListerExpansion
}

// nooBaaBucketClassNamespaceLister implements the NooBaaBucketClassNamespaceLister
// interface.
type nooBaaBucketClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NooBaaBucketClasses in the indexer for a given namespace.
func (s nooBaaBucketClassNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NooBaaBucketClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NooBaaBucketClass))
	})
	return ret, err
}

// Get retrieves the NooBaaBucketClass from the indexer for a given namespace and name.
func (s nooBaaBucketClassNamespaceLister) Get(name string) (*v1alpha1.NooBaaBucketClass, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("noobaabucketclass"), name)
	}
	return obj.(*v1alpha1.NooBaaBucketClass), nil
}
